kind: Template
apiVersion: v1
metadata:
  name: "%SVC_NAME%-%STAND%-template"
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "%SVC_NAME%-%STAND%"
      labels:
        app: "%SVC_NAME%-%STAND%"
      namespace: "%NAMESPACE%"
    spec:
      replicas: 1
      strategy:
        type: Rolling
      selector:
        app: "%SVC_NAME%-%STAND%"
      template:
        metadata:
          name: "%SVC_NAME%-%STAND%"
          labels:
            app: "%SVC_NAME%-%STAND%"
        spec:
          containers:
            - image: "%IMAGE%:%TAG%"
              imagePullPolicy: Always
              importPolicy:
                insecure: "true"
              name: "%SVC_NAME%-%STAND%"
              annotations:
                prometheus.io/scrape: 'true'
                prometheus.io/metrics_path: /metrics
                prometheus.io/scrape_scheme: http
              args:
                - "--resources=pods"
                - "--namespaces=%NAMESPACES%"
                - "--metric-allowlist=kube_pod_start_time,kube_pod_created,kube_pod_status_ready,kube_pod_container_status_running,kube_pod_container_status_restarts_total,kube_pod_container_state_started"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /healthz
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 3
                timeoutSeconds: 2
                periodSeconds: 5
                failureThreshold: 1
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 3
                timeoutSeconds: 2
                periodSeconds: 5
                failureThreshold: 1
              resources:
                limits:
                  memory: 128Mi
                requests:
                  cpu: 1m
                  memory: 16Mi
          #serviceAccountName: "%SVC_NAME%-rdbo"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "%SVC_NAME%-%STAND%"
      labels:
        app: "%SVC_NAME%-%STAND%"
    spec:
      type: ClusterIP
      ports:
        - name: 8080-port
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: "%SVC_NAME%-%STAND%"
